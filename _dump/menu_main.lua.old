local button_color = Vector(38,12,8)/255
local panel_color = button_color*1.2

function PANEL:Init()  
	local vsize = GetViewportSize() 
	--self:SetColor(Vector(0,0,0))
	self:SetSize( vsize*2)
	self:SetTexture(LoadTexture("gui/menu/bkg1.png")) 
	--menu
	local menu = panel.Create()
	menu:SetSize(800,800)
	menu:SetColor(Vector(1,1,1)/1000)
	menu:SetTexture(LoadTexture("gui/menu/sn_1024.dds"))
	local sp = panel.Create("button")
	local mp = panel.Create("button")
	local opt = panel.Create("button")
	local exi = panel.Create("button")
	local mmn = panel.Create("button") mmn:SetVisible(false)
	
	 sp:SetPos(0,200)
	 mp:SetPos(0,100)
	opt:SetPos(0,-100)
	exi:SetPos(0,-200)
	mmn:SetPos(0,-200)
	
	sp:SetText("Play")
	mp:SetText("Connect")
	opt:SetText("Options")
	exi:SetText("Exit")
	mmn:SetText("Main menu")
	
	local function SetupStyle(p)
		p:SetTextColor(Vector(1,1,1)/2)
		p:SetColors(Vector(1,1,1),button_color,button_color*2)
	end
	
	local buttons = {sp,mp,opt,exi,mmn}
	for k,v in pairs(buttons) do 
		v:SetSize(150,20) 
		v:SetTextAlignment(ALIGN_CENTER)
		SetupStyle(v)
		menu:Add(v)
	end 
	
	
	
	 
	
	menu.sp = sp
	menu.mp = mp
	menu.opt = opt
	menu.exi = exi
	menu.mmn = mmn
	
	self:Add(menu)
	
	sp .OnClick = function() 
		if self.worldIsLoaded then
			self:Hide2()
		else
			_GLS = self
			_GLS:LoadingScreen()
			debug.Delayed(1,function() 
				LoadWorld()  
				SpawnPlayerChar() 
				--SetController('freecameracontroller')   
				debug.Delayed(1,function() 
					_GLS:SetWorldLoaded(true)
					_GLS:Hide2()
					_GLS = nil
				end)
			end)
		end
	end
	mp .OnClick = function()
		self:Network()
	end
	opt.OnClick = function()
		self:Settings()
	end
	exi.OnClick = function()
		engine.Exit()
	end
	mmn.OnClick = function()
		UnloadWorld()
		self:SetWorldLoaded(false)
	end
	self.menu = menu
	
	--loading
	local loading = panel.Create()
	loading:SetSize(800,800) 
	loading:SetColor(Vector(1,1,1)/1000)
	loading:SetTexture(LoadTexture("gui/menu/sn_1024.dds"))
	loading:SetVisible(false)
	
	
	local loading_label = panel.Create()
	loading_label:SetText("Loading")
	loading_label:SetTextAlignment(ALIGN_CENTER)
	loading_label:SetColor(Vector(0,0,0))
	loading_label:SetTextColor( Vector(1,1,1))
	loading_label:SetSize(280,20)
	loading_label:SetPos(0,-520)
	loading:Add(loading_label)
	
	self:Add(loading)
	self.loading = loading
	
	local function NewDialogPanel(name) 
		local pn = panel.Create()
		pn:SetSize(500,200) 
		pn:SetVisible(false)
		pn:SetColor(panel_color/2)
		
		local sub = panel.Create()
		sub:SetSize(500-50,200-50)  
		sub:SetColor(Vector(50,150,50)/256/3)
		
		local label = panel.Create()
		label:SetText(name)
		label:SetTextAlignment(ALIGN_CENTER)
		label:SetSize(280,20)
		label:SetPos(0,200-25) 
		label:SetTextColor( Vector(1,1,1))
		label:SetColor(panel_color/2)
		
		pn:Add(sub)
		pn:Add(label)
		
		return pn
	end
	
	
	--network
	local network_panel = NewDialogPanel("Connect")-- panel.Create()
	--network_panel:SetSize(300,100) 
	--network_panel:SetVisible(false)
	
	local network_label = panel.Create()
	network_label:SetText("Enter Address")
	network_label:SetTextAlignment(ALIGN_CENTER)
	network_label:SetSize(280,20)
	network_label:SetPos(0,50)
	
	local network_address = panel.Create("input_text")
	network_address.downcolor = Vector(50,50,50)/256
	network_address.upcolor = Vector(0,0,0)/256
	network_address.hovercolor = Vector(80,80,80)/256
	network_address:SetColor(network_address.upcolor)
	network_address:SetTextColor( Vector(1,1,1))
	network_address:SetSize(280,20)
	network_address:SetText(debug.LoadString("network.lastip"))
	
	local network_connect = panel.Create("button")
	network_connect:SetText("Connect")
	network_connect:SetSize(70,20)
	network_connect:SetPos(-100,-50)
	
	local network_back = panel.Create("button")
	network_back:SetText("Back")
	network_back:SetSize(70,20)
	network_back:SetPos(100,-50)
	
	network_connect.OnClick = function()
		_GLS = self
		_GLS:LoadingScreen()
		_GLT = network_address:GetText()
		debug.SaveString("network.lastip",_GLT)
		debug.Delayed(1,function()  
			if network.IsConnected() then
				UnloadWorld()
			end
			 
			 
			if ConnectTo(_GLT) then
				debug.Delayed(1,function()
					_GLS:SetWorldLoaded(true)
					_GLS:Hide2()
					_GLS = nil
				end)
			else 
				debug.Delayed(1,function() 
					_GLS:Network()
					_GLS = nil
				end)
			end
		end)
	end
	network_back.OnClick = function()
		self:Menu()
	end
	network_panel:Add(network_label)
	network_panel:Add(network_address)
	network_panel:Add(network_connect) 
	network_panel:Add(network_back) 
	self:Add(network_panel)
	self.network = network_panel
	 
	--settings
	
	local function AddSettingInput(pn,name,variablename)
		local savelist = pn.savelist or {}
		local index = pn.propid or 0
		
		local panelColor = Vector(50,150,50)/256
		
		local sp = panel.Create()
		sp:SetSize(450,30)
		sp:SetPos(0,100-index*60)
		
		local label = panel.Create()
		label:SetText(name)
		label:SetTextAlignment(ALIGN_CENTER)
		label:SetSize(170,20)
		label:SetPos((-450+170),0)
		label:SetColor(panelColor/2)
		label:SetTextColor( Vector(1,1,1))
		sp:Add(label)
	
		local inp = panel.Create("input_text")
		inp.downcolor = Vector(50,50,50)/256
		inp.upcolor = Vector(0,0,0)/256
		inp.hovercolor = Vector(80,80,80)/256
		inp:SetColor(inp.upcolor)
		inp:SetTextColor( Vector(1,1,1))
		inp:SetSize(280,20)
		inp:SetPos((450-280),0)
		inp:SetText(debug.LoadString(variablename))
		--inp:SetPos(
		sp:Add(inp)
		sp:SetColor(panelColor)
		
		pn:Add(sp)
		
		savelist[variablename] = inp
		
		pn.savelist = savelist
		pn.propid = index + 1
	end
	
	local settings_panel = NewDialogPanel("Options")--  panel.Create()
	--settings_panel:SetSize(500,200) 
	--settings_panel:SetVisible(false)
	--settings_panel:SetColor(panel_color/2)
	--
	--local settings_panel_sub = panel.Create()
	--settings_panel_sub:SetSize(500-50,200-50)  
	--settings_panel_sub:SetColor(Vector(50,150,50)/256/3)
	--settings_panel:Add(settings_panel_sub)
	--
	--local settings_label = panel.Create()
	--settings_label:SetText("Options")
	--settings_label:SetTextAlignment(ALIGN_CENTER)
	--settings_label:SetSize(280,20)
	--settings_label:SetPos(0,200-25) 
	--settings_label:SetTextColor( Vector(1,1,1))
	--settings_label:SetColor(panel_color/2)
	
	AddSettingInput(settings_panel,"Name:","player.name")
	AddSettingInput(settings_panel,"Model:","player.model")
	--local settings_name = panel.Create("input_text")
	--settings_name.downcolor = Vector(50,50,50)/256
	--settings_name.upcolor = Vector(0,0,0)/256
	--settings_name.hovercolor = Vector(80,80,80)/256
	--settings_name:SetColor(settings_name.upcolor)
	--settings_name:SetTextColor( Vector(1,1,1))
	--settings_name:SetSize(280,20)
	--settings_name:SetText(debug.LoadString("player.name"))
	--
	--local settings_model = panel.Create("input_text")
	--settings_model.downcolor = Vector(50,50,50)/256
	--settings_model.upcolor = Vector(0,0,0)/256
	--settings_model.hovercolor = Vector(80,80,80)/256
	--settings_model:SetColor(settings_model.upcolor)
	--settings_model:SetTextColor( Vector(1,1,1))
	--settings_model:SetSize(280,20)
	--settings_model:SetPos(0,-50)
	--settings_model:SetText(debug.LoadString("player.model"))
	
	local settings_save = panel.Create("button")
	settings_save:SetText("Save")
	settings_save:SetSize(70,20)
	settings_save:SetPos(-100,-100) 
	SetupStyle(settings_save)
	settings_save.OnClick = function()
		--debug.SaveString("player.name",settings_name:GetText())
		--debug.SaveString("player.model",settings_model:GetText())
		for k,v in pairs(settings_panel.savelist) do
			debug.SaveString(k,v:GetText())
		end
		self:Menu()
	end
	
	local settings_back = panel.Create("button")
	settings_back:SetText("Back")
	settings_back:SetSize(70,20)
	settings_back:SetPos(100,-100)
	SetupStyle(settings_back)
	settings_back.OnClick = function()
		self:Menu()
	end
	
	--settings_panel:Add(settings_label)
	--settings_panel:Add(settings_name)
	--settings_panel:Add(settings_model) 
	settings_panel:Add(settings_save) 
	settings_panel:Add(settings_back) 
	self:Add(settings_panel)
	self.settings = settings_panel
	
	--meta
	self.panels = {menu,network_panel, settings_panel,loading}
	
	--self:Add(chat)
	--self.chat = chat
	
	hook.Add("input.keydown","mainmenu",function(key)  
		if input.GetKeyboardBusy() then return nil end
		if key == KEYS_ESCAPE then 
			if self.worldIsLoaded then 
				self:MenuToggle() 
			end
		end
		if key == KEYS_OEMTILDE then 
			local console = self.console
			if not console then
				console = panel.Create("window_console") 
				console:SetPos(0,0) 
				console:SetTitle("ConsoleWindow")
				self:Add(console)
				self.console = console
			end
			
			self:Menu()
			if console.enabled then
				console:SetVisible(false)
				console.enabled = false
			else
				console:SetVisible(true)
				console.enabled = true
			end
		end
	end)
	
end

function PANEL:ReVis(n)
	for k,v in pairs(self.panels) do
		if(n==v) then
			v:SetVisible(true)
		else
			v:SetVisible(false)
		end
	end
end

function PANEL:LoadingScreen()
	self:SetVisible(true) 
	self:ReVis(self.loading) 
end
function PANEL:Network()
	self:SetVisible(true) 
	self:ReVis(self.network) 
end
function PANEL:Hide2()
	self:SetVisible(false) 
	self:ReVis()  
end 
function PANEL:Menu()
	self:SetVisible(true) 
	self:ReVis(self.menu)  
end
function PANEL:Settings()
	self:SetVisible(true) 
	self:ReVis(self.settings)  
end
function PANEL:MenuToggle()
	if self:GetVisible() then
		self:Hide2()
	else
		self:Menu()
	end
end
function PANEL:SetWorldLoaded(b)
	self.worldIsLoaded = b
	if b then
		self:SetAlpha(0)
		self.menu.mmn:SetVisible(true)
		self.menu.exi:SetVisible(false)
	else
		self:SetAlpha(1)
		self.menu.mmn:SetVisible(false)
		self.menu.exi:SetVisible(true)
	end
end